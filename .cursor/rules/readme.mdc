---
description: 
globs: 
alwaysApply: true
---
# Secret Vault プロジェクト概要

## プロジェクトの考え方

Secret Vaultは、エンドツーエンドの暗号化を使用してセキュアな情報共有を実現するシステムです。このプロジェクトは以下の原則に基づいています：

1. **ゼロトラスト設計**
   - サーバーは暗号化されたデータのみを保存し、平文にアクセスできません
   - すべての暗号化/復号はクライアント側で行われます

2. **柔軟な鍵管理**
   - ユーザーは複数の鍵ペアを管理でき、定期的なローテーションが可能
   - 各鍵は独立したライフサイクルを持ちます

3. **詳細な監査と追跡**
   - すべての操作が記録され、完全な監査証跡を提供
   - データの各バージョンが保存され、変更履歴を確認可能

4. **招待制アクセス管理**
   - シークレット情報は招待と許可のプロセスによってのみ共有可能
   - 許可なく情報にアクセスすることはできません

## 主な機能

### 1. 鍵管理
- ユーザーはローカルで公開鍵/秘密鍵ペアを生成
- 公開鍵のみをサーバーにアップロード
- 複数の鍵を管理し、環境やアプリケーションごとに分けることが可能
- 定期的な鍵ローテーションの実施

### 2. シークレット管理
- シークレット情報の作成、更新、削除
- バージョン管理によって履歴を保持
- メタデータによる追加情報の管理

### 3. アクセス制御
- 招待ベースのアクセス制御
- シークレットの作成者が他ユーザーを招待
- 招待されたユーザーは申請を行い、招待者が許可
- きめ細かいアクセス権限の設定

### 4. 監査と追跡
- すべての操作が詳細に記録
- 誰が、いつ、何をしたかを完全に追跡
- セキュリティインシデント発生時の調査をサポート

## 処理の流れ

### ユーザー登録とセットアップ
1. ユーザーがアカウントを作成
2. ローカルで鍵ペア（公開鍵/秘密鍵）を生成
3. 公開鍵のみをサーバーに登録

### シークレット作成
1. ユーザーがシークレット情報を入力
2. クライアント側で自分の公開鍵を使って情報を暗号化
3. 暗号化されたデータと基本メタデータをサーバーに送信
4. サーバーは暗号化データとメタデータを保存

### シークレット共有
1. 作成者が他のユーザーを招待
2. 招待されたユーザーが招待を確認し、アクセス申請
3. 招待者が申請を承認
4. システムがシークレットを招待されたユーザーの公開鍵で再暗号化
5. ユーザーごとに暗号化されたデータを保存

### シークレットアクセス
1. ユーザーがシークレットにアクセス要求
2. サーバーがアクセス権限を確認
3. そのユーザー用に暗号化されたデータを送信
4. クライアント側でユーザーの秘密鍵を使って復号
5. アクセスログが記録される

### 鍵のローテーション
1. ユーザーが新しい鍵ペアを生成
2. 新しい公開鍵をサーバーに登録
3. アクセスできるすべてのシークレットが新しい鍵で再暗号化
4. 古い鍵は非アクティブに設定または失効

## 技術スタック

- **暗号化**: RSA公開鍵暗号（大きなデータの場合はハイブリッド暗号化）

## セキュリティ考慮事項

- サーバーは平文のシークレット情報にアクセスできない
- 通信経路は全てTLSで保護
- 秘密鍵はクライアント側でのみ保管され、サーバーには送信されない
- すべての操作が監査ログに記録され、異常な行動を検出可能
- 鍵の有効期限と定期的なローテーションによるセキュリティ強化

このプロジェクトにより、APIキー、認証情報、機密文書など、様々な秘密情報を安全に保存・共有するためのプラットフォームを提供します。